elastic-query-service:
  version: v1
  custom-audience: elastic-query-service
  webclient:
    connect-timeout-ms: 10000
    read-timeout-ms: 10000
    write-timeout-ms: 10000
    max-in-memory-size: 10485760 # 10MB
    content-type: 'application/vnd.api.v1+json'
    accept-type: 'application/vnd.api.v1+json'
    query-type: 'ANALYTICS_DATABASE' # or 'KAFKA_STATE_STORE' to avoid DB access
  query-from-kafka-state-store:
    method: GET
    uri: "http://kafka-streams-service/kafka-streams-service/get-word-count-by-word/{word}" # with discovery service we need to use service names
    accept: ${elastic-query-service.webclient.accept-type}
  query-from-analytics-database:
    method: GET
    uri: "http://analytics-service/analytics-service/get-word-count-by-word/{word}" # with discovery service we need to use service names
    accept: ${elastic-query-service.webclient.accept-type}

server:
  port: 8183
  servlet:
    context-path: /elastic-query-service # required to set up context path for web application

spring:
  cloud:
    loadbalancer:
      ribbon:
        enabled: false # false to use spring boot load balancer instead of Eureka's load balancer
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:9091/realms/microservices-realm
          jwk-set-uri: http://localhost:9091/realms/microservices-realm/protocol/openid-connect/certs
      client:
        registration: # will be calling kafka-streams-service to get aggregated analytics data
          keycloak:
            client-id: 'elastic-query-service'
            client-secret: 'Wnfo3GDjQR4nKnYjIEoW4UrO3fCmQoNV'
            authorizationGrantType: client_credentials # client_credentials is used for M2M communication (instead of authorization_code_flow) and there is no user interaction required
        provider:
          keycloak:
            tokenUri: http://localhost:9091/auth/realms/microservices-realm/protocol/openid-connect/token
  jpa:
    open-in-view: false # by default, it is true, and it uses persistent context to stay opened which is bad for performance
    show-sql: true
    database-platform: org.hibernate.dialect.PostgreSQL9Dialect
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQL9Dialect
  datasource:
    url: jdbc:postgresql://localhost:5432/postgres?currentSchema=public&binaryTransfer=true&reWriteBatchedInserts=true # binaryTransfer=true for better performance; reWriteBatchedInserts=true runs all inserts on PG side in batches as long as they are in the same transaction
    username: postgres
    password: 'admin' # encrypted 'postgres' from docker-compose/keycloak_authorization_server.yml
    driver-class-name: org.postgresql.Driver
    platform: postgres
    schema: classpath:init-schema.sql
    data: classpath:init-data.sql
    initialization-mode: always # runs DB scripts each time app starts, which is ok for this demo use case

elastic-query-config:
  text-field: text

elastic-config:
  index-name: twitter-index
  connection-url: http://localhost:9200
  connect-timeout-ms: 5000
  socket-timeout-ms: 30000

user-config:
  username: test
  password: 'test1234' # encrypted 'test1234'
  roles: USER

springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html

security:
  paths-to-ignore: /api-docs # array
